#version 460

//---- Structs ----//

struct GameObject {
    vec4 pos_and_scale;
    vec4 euler_and_zero;
    vec3 angular_velocity;
    uint objectType;
};

struct AABB {
    vec4 min;
    vec4 max;
};

//---- Workgroup Size ----//

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

//---- Resources ----//

uniform float frameTime;
uniform int maxObjectCount;

layout(std430, binding = 0) buffer objectBuffer {
    GameObject[] objects;
};

layout(std430, binding = 1) readonly buffer cameraBuffer {
	mat4 view;
	mat4 projection;
    mat4 viewProj;
};

layout(binding = 2, std430) writeonly buffer modelBuffer {
    mat4 modelTransforms[];
};

layout(binding = 3) uniform atomic_uint drawCommands[70];

layout(binding = 4, std430) buffer meshBuffer {
    AABB boundingBoxes[14];
};

//---- Functions ----//

bool visible(uint objectType, mat4 transform) {

    //extract bounding radius
    AABB box = boundingBoxes[objectType];
	
	vec4 corners[8] = {
		vec4(box.min.x, box.min.y, box.min.z, 1.0),
		vec4(box.min.x, box.min.y, box.max.z, 1.0),
		vec4(box.min.x, box.max.y, box.min.z, 1.0),
		vec4(box.min.x, box.max.y, box.max.z, 1.0),
		vec4(box.max.x, box.min.y, box.min.z, 1.0),
		vec4(box.max.x, box.min.y, box.max.z, 1.0),
		vec4(box.max.x, box.max.y, box.min.z, 1.0),
		vec4(box.max.x, box.max.y, box.max.z, 1.0),
	};

	AABB screenBox;
	screenBox.min = vec4(vec3(1e30), 1.0);
	screenBox.max = vec4(vec3(-1e30), 1.0);

	for (int i = 0; i < 8; ++i) {
		vec4 p = viewProj * transform * corners[i];
		p.x = p.x / p.w;
		p.y = p.y / p.w;
		p.z = p.z / p.w;

		screenBox.min = min(screenBox.min, p);
		screenBox.max = max(screenBox.max, p);
	}

	return !(screenBox.min.x > 1.0f || screenBox.min.y > 1.0f || screenBox.min.z > 1.0f 
		|| screenBox.max.x < -1.0f || screenBox.max.y < -1.0f || screenBox.max.z < -1.0f);
}

mat4 rotationX(float angle) {
    float c = cos(radians(angle));
	float s = sin(radians(angle));

    return mat4(1.0, 0.0, 0.0, 0.0,
			 	0.0,   c,  -s, 0.0,
				0.0,   s,   c, 0.0,
				0.0, 0.0, 0.0, 1.0);
}

mat4 rotationY( in float angle ) {
	float c = cos(radians(angle));
	float s = sin(radians(angle));

	return mat4(  c, 0.0,   s,	0.0,
			 	0.0, 1.0, 0.0,	0.0,
				 -s, 0.0,   c,	0.0,
				0.0, 0.0, 0.0,	1.0);
}

mat4 rotationZ( in float angle ) {
	float c = cos(radians(angle));
	float s = sin(radians(angle));

	return mat4(  c,  -s, 0.0, 0.0,
			 	  s,   c, 0.0, 0.0,
				0.0, 0.0, 1.0, 0.0,
				0.0, 0.0, 0.0, 1.0);
}

mat4 translate(vec3 v) {
	return mat4(1.0, 0.0, 0.0, 0.0,
			 	0.0, 1.0, 0.0, 0.0,
				0.0, 0.0, 1.0, 0.0,
				v.x, v.y, v.z, 1.0);
}

mat4 scale(float s) {
	return mat4(  s, 0.0, 0.0, 0.0,
			 	0.0,   s, 0.0, 0.0,
				0.0, 0.0,   s, 0.0,
				0.0, 0.0, 0.0, 1.0);
}

void main()
{

    //fetch ID and check against bounds
    uint i = gl_GlobalInvocationID.x;
    if (i >= maxObjectCount) {
        return;
    }

    //Update eulers
	vec3 eulers = objects[i].euler_and_zero.xyz + (frameTime / 1000.0) * objects[i].angular_velocity;
	eulers = mod(eulers, 360.0);
	objects[i].euler_and_zero = vec4(eulers, 0.0);

	//Compute new transform
	vec4 pos_and_scale = objects[i].pos_and_scale;
	mat4 rZ = rotationZ(eulers.z);
	mat4 rY = rotationY(eulers.y);
	mat4 translation = translate(pos_and_scale.xyz);
	mat4 transform = translation * rY * rZ;

	//Visibility Test
	uint objectType = objects[i].objectType;
	if (!visible(objectType, transform)) {
		return;
	}

	//Save id and update batch
	uint writePos = atomicCounter(drawCommands[5 * objectType + 4]) + atomicCounterIncrement(drawCommands[5 * objectType + 1]);

	//Save Model transform
	modelTransforms[writePos] = transform;
}
//------------//